@{
    ViewData["Title"] = "Home Page";
}
@section scripts
{
    <script type="text/javascript">
        $(function () {
            $('#jquery-query-builder').on('afterUpdateRuleFilter.queryBuilder', function (e, rule) {
                console.log(getRules())
            });
            $('#jquery-query-builder').on('afterUpdateRuleOperator.queryBuilder', function (e, rule) {
                console.log(getRules())
            });
            $('#jquery-query-builder').on('afterUpdateRuleValue.queryBuilder', function (e, rule) {
                console.log(getRules())
            });


            var tableData = [];

            var filterDefinition = @Html.Raw(ViewBag.FilterDefinition);
            var customFilters = {
                condition: 'AND',
                rules: []
            };
            var jqueryQueryBuilder = $('#jquery-query-builder');
            var jqueryQueryBuilderDom = jqueryQueryBuilder.queryBuilder({
                plugins: [],
                //allow_groups: 0,
                allow_empty: true,
                filters: filterDefinition,
                rules: customFilters,
                icons: {
                    add_group: 'fa fa-plus-square',
                    add_rule: 'fa fa-plus-circle',
                    remove_group: 'fa fa-minus-square',
                    remove_rule: 'fa fa-minus-circle',
                    error: 'fa fa-exclamation-triangle',
                    sortable: 'fa fa-exclamation-triangle'
                }
            });

            var convertSingleValuesToArray = function (obj) {
                if (obj != null) {
                    if (obj.hasOwnProperty("value")) {
                        if (Object.prototype.toString.call(obj.value) !== '[object Array]') {
                            obj.value = [obj.value];
                        }
                    }
                    if (obj.hasOwnProperty("rules") && obj.rules != null) {
                        for (var i = 0; i < obj.rules.length; i++) {
                            convertSingleValuesToArray(obj.rules[i]);
                        }
                    }
                }
            }

            var getRules = function () {
                try {
                    var res = jqueryQueryBuilder.queryBuilder('getRules');
                    convertSingleValuesToArray(res);
                    return res;
                } catch (ex) {
                    return null;
                }
            }

            var buildTable;
            var filterData = function () {

                $.ajax({
                    type: 'POST',
                    url: "../Home/Index",
                    data: JSON.stringify(getRules()),
                    success: function (returnPayload) {
                        tableData = returnPayload;
                        buildTable();
                        console && console.log("request succeeded");
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        console && console.log("request failed");
                    },
                    dataType: "json",
                    contentType: "application/json",
                    processData: false,
                    async: true
                });
            }

            $('#applyFilter').on('click', function () {
                filterData();
            });
            buildTable = function () {
                var tbody = $('#data-table tbody'),
                    props = ["firstName", "lastName", "birthday", "deceased", "address", "city", "state", "zipCode"];
                tbody.empty();
                $.each(tableData, function (i, reservation) {
                    var tr = $('<tr>');
                    $.each(props, function (i, prop) {
                        var value = reservation[prop];
                        if (typeof value === "boolean") {
                            value = String(value); // Convert boolean to string
                        }
                        $('<td>').html(value).appendTo(tr);
                    });
                    tbody.append(tr);
                });
            };

            filterData();

        });


        var setRuleButton = document.getElementById('set-rule');

        // Thêm sự kiện click vào nút
        setRuleButton.addEventListener('click', function () {
            // Xử lý sự kiện tại đây
            var rules_basic = {
                "condition": "OR",
                "rules": [
                    {
                        "id":"2",
                        "field": "LastName",
                        "type": "integer",
                        "input": "radio",
                        "operator": "equal",
                        "value": {
                            1: 'Yes',
                            0: 'No'
                        }
                    }
                ],
                "valid": true
            };

            $('#jquery-query-builder').queryBuilder('setRules', rules_basic);

            // Hoặc có thể gọi một hàm xử lý khác ở đây
            // handleSetRule();
        });
    </script>
}
<div class="jumbotron">
    <h1>Dynamic Linq Query Builder Example</h1>
    <p class="lead">Dynamically filter object collections based on complex queries at runtime.</p>
</div>

<div class="row">
    <div class="col-md-4">
        <h2>Build Filters</h2>
        <div id="jquery-query-builder"></div>
        <button id="applyFilter">Apply Filter</button>
    </div>
    <button id="set-rule">Set Rule</button>
    <input id="input_id" name="inputName" type="text" />

    <div class="col-md-8">
        <h2>User Data</h2>
        <table id="data-table">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Birthday</th>
                    <th>Deceased</th>
                    <th>Address</th>
                    <th>City</th>
                    <th>State</th>
                    <th>Zip Code</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

</div>
